Studio generated .editorconfig file with C++ settings.
root = true

[*.{c++,cc,cpp,cppm,cxx,h,h++,hh,hpp,hxx,inl,ipp,ixx,tlh,tli}]

# Visual C++ Code Style settings

cpp_generate_documentation_comments = xml

# Visual C++ Formatting settings

cpp_indent_braces = true
cpp_indent_multi_line_relative_to = innermost_parenthesis
cpp_indent_within_parentheses = indent
cpp_indent_preserve_within_parentheses = true
cpp_indent_case_contents = true
cpp_indent_case_labels = true
cpp_indent_case_contents_when_block = false
cpp_indent_lambda_braces_when_parameter = true
cpp_indent_goto_labels = one_left
cpp_indent_preprocessor = leftmost_column
cpp_indent_access_specifiers = false
cpp_indent_namespace_contents = false
cpp_indent_preserve_comments = false
cpp_new_line_before_open_brace_namespace = ignore
cpp_new_line_before_open_brace_type = ignore
cpp_new_line_before_open_brace_function = ignore
cpp_new_line_before_open_brace_block = ignore
cpp_new_line_before_open_brace_lambda = ignore
cpp_new_line_scope_braces_on_separate_lines = false
cpp_new_line_close_brace_same_line_empty_type = false
cpp_new_line_close_brace_same_line_empty_function = false
cpp_new_line_before_catch = true
cpp_new_line_before_else = true
cpp_new_line_before_while_in_do_while = false
cpp_space_before_function_open_parenthesis = remove
cpp_space_within_parameter_list_parentheses = false
cpp_space_between_empty_parameter_list_parentheses = false
cpp_space_after_keywords_in_control_flow_statements = true
cpp_space_within_control_flow_statement_parentheses = false
cpp_space_before_lambda_open_parenthesis = false
cpp_space_within_cast_parentheses = false
cpp_space_after_cast_close_parenthesis = false
cpp_space_within_expression_parentheses = false
cpp_space_before_block_open_brace = true
cpp_space_between_empty_braces = false
cpp_space_before_initializer_list_open_brace = false
cpp_space_within_initializer_list_braces = true
cpp_space_preserve_in_initializer_list = true
cpp_space_before_open_square_bracket = false
cpp_space_within_square_brackets = false
cpp_space_before_empty_square_brackets = false
cpp_space_between_empty_square_brackets = false
cpp_space_group_square_brackets = true
cpp_space_within_lambda_brackets = false
cpp_space_between_empty_lambda_brackets = false
cpp_space_before_comma = false
cpp_space_after_comma = true
cpp_space_remove_around_member_operators = true
cpp_space_before_inheritance_colon = true
cpp_space_before_constructor_colon = true
cpp_space_remove_before_semicolon = true
cpp_space_after_semicolon = true
cpp_space_remove_around_unary_operator = true
cpp_space_around_binary_operator = insert
cpp_space_around_assignment_operator = insert
cpp_space_pointer_reference_alignment = left
cpp_space_around_ternary_operator = insert
cpp_use_unreal_engine_macro_formatting = true
cpp_wrap_preserve_blocks = one_liners

# Visual C++ Inlcude Cleanup settings

cpp_include_cleanup_add_missing_error_tag_type = suggestion
cpp_include_cleanup_remove_unused_error_tag_type = dimmed
cpp_include_cleanup_sort_after_edits = false
cpp_sort_includes_error_tag_type = none
cpp_sort_includes_priority_case_sensitive = false
cpp_sort_includes_priority_style = quoted
cpp_includes_style = default
cpp_includes_use_forward_slash = true






[*.{cpp,h}]


##########################################
# Styles
##########################################

# camel_case_style - Define the camelCase style
cpp_naming_style.member_style.capitalization = camel_case
cpp_naming_style.member_style.required_prefix = m_

# member_function_style - member function
cpp_naming_style.member_function_style.capitalization = pascal_case



# camel_case_style - Define the camelCase style
cpp_naming_style.camel_case_style.capitalization = camel_case
# pascal_case_style - Define the PascalCase style
cpp_naming_style.pascal_case_style.capitalization = pascal_case

# first_upper_style - The first character must start with an upper-case character
cpp_naming_style.first_upper_style.capitalization = first_word_upper
# prefix_interface_with_i_style - Interfaces must be PascalCase and the first character of an interface must be an 'I'
cpp_naming_style.prefix_interface_with_i_style.capitalization = pascal_case
cpp_naming_style.prefix_interface_with_i_style.required_prefix = I
# prefix_type_parameters_with_t_style - Generic Type Parameters must be PascalCase and the first character must be a 'T'
cpp_naming_style.prefix_type_parameters_with_t_style.capitalization = pascal_case
cpp_naming_style.prefix_type_parameters_with_t_style.required_prefix = T
# disallowed_style - Anything that has this style applied is marked as disallowed
cpp_naming_style.disallowed_style.capitalization  = pascal_case
cpp_naming_style.disallowed_style.required_prefix = ____RULE_VIOLATION____
cpp_naming_style.disallowed_style.required_suffix = ____RULE_VIOLATION____
# internal_error_style - This style should never occur... if it does, it indicates a bug in file or in the parser using the file
cpp_naming_style.internal_error_style.capitalization  = pascal_case
cpp_naming_style.internal_error_style.required_prefix = ____INTERNAL_ERROR____
cpp_naming_style.internal_error_style.required_suffix = ____INTERNAL_ERROR____



##########################################
# .NET Design Guideline Field Naming Rules
# Naming rules for fields follow the .NET Framework design guidelines
# https://docs.microsoft.com/dotnet/standard/design-guidelines/index
##########################################

# All public/protected/protected_internal constant fields must be PascalCase
# https://docs.microsoft.com/dotnet/standard/design-guidelines/field
#cpp_naming_symbols.public_protected_constant_fields_group.applicable_accessibilities = public, protected
#cpp_naming_symbols.public_protected_constant_fields_group.required_modifiers         = const
#cpp_naming_symbols.public_protected_constant_fields_group.applicable_kinds           = field
#cpp_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.symbols    = public_protected_constant_fields_group
#cpp_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.style      = pascal_case_style
#cpp_naming_rule.public_protected_constant_fields_must_be_pascal_case_rule.severity   = warning

# All public/protected/protected_internal static readonly fields must be PascalCase
# https://docs.microsoft.com/dotnet/standard/design-guidelines/field
#cpp_naming_symbols.public_protected_static_readonly_fields_group.applicable_accessibilities = public, protected
#cpp_naming_symbols.public_protected_static_readonly_fields_group.required_modifiers         = static, 
#cpp_naming_symbols.public_protected_static_readonly_fields_group.applicable_kinds           = field
#cpp_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.symbols    = public_protected_static_readonly_fields_group
#cpp_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.style      = pascal_case_style
#cpp_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.severity   = warning

# No other public/protected/protected_internal fields are allowed
# https://docs.microsoft.com/dotnet/standard/design-guidelines/field
#cpp_naming_symbols.other_public_protected_fields_group.applicable_accessibilities = public, protected, 
#cpp_naming_symbols.other_public_protected_fields_group.applicable_kinds           = field
#cpp_naming_rule.other_public_protected_fields_disallowed_rule.symbols             = other_public_protected_fields_group
#cpp_naming_rule.other_public_protected_fields_disallowed_rule.style               = disallowed_style
#cpp_naming_rule.other_public_protected_fields_disallowed_rule.severity            = error

##########################################
# StyleCop Field Naming Rules
# Naming rules for fields follow the StyleCop analyzers
# This does not override any rules using disallowed_style above
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers
##########################################

# All constant fields must be PascalCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1303.md
#cpp_naming_symbols.stylecop_constant_fields_group.applicable_accessibilities = public,  protected,  private
#cpp_naming_symbols.stylecop_constant_fields_group.required_modifiers         = const
#cpp_naming_symbols.stylecop_constant_fields_group.applicable_kinds           = field
#cpp_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.symbols    = stylecop_constant_fields_group
#cpp_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.style      = pascal_case_style

#cpp_naming_rule.stylecop_constant_fields_must_be_pascal_case_rule.severity   = warning


# All static readonly fields must be PascalCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1311.md
#cpp_naming_symbols.stylecop_static_readonly_fields_group.applicable_accessibilities = protected, private
#cpp_naming_symbols.stylecop_static_readonly_fields_group.applicable_kinds           = field
#cpp_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.symbols    = stylecop_static_readonly_fields_group
#cpp_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.style      = pascal_case_style
#cpp_naming_rule.stylecop_static_readonly_fields_must_be_pascal_case_rule.severity   = warning


# No non-private instance fields are allowed
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1401.md
#cpp_naming_symbols.stylecop_fields_must_be_private_group.applicable_accessibilities = public, protected
#cpp_naming_symbols.stylecop_fields_must_be_private_group.applicable_kinds           = field
#cpp_naming_rule.stylecop_instance_fields_must_be_private_rule.symbols               = stylecop_fields_must_be_private_group
#cpp_naming_rule.stylecop_instance_fields_must_be_private_rule.style                 = disallowed_style
#cpp_naming_rule.stylecop_instance_fields_must_be_private_rule.severity              = error

# Private fields must be camelCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1306.md
cpp_naming_symbols.stylecop_private_fields_group.applicable_accessibilities = private, protected, public 
cpp_naming_symbols.stylecop_private_fields_group.applicable_kinds           = field
cpp_naming_rule.stylecop_private_fields_must_be_camel_case_rule.symbols     = stylecop_private_fields_group
cpp_naming_rule.stylecop_private_fields_must_be_camel_case_rule.style       = member_style
cpp_naming_rule.stylecop_private_fields_must_be_camel_case_rule.severity    = warning

# Member Functions must be Pasca Case
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1306.md
#cpp_naming_symbols.stylecop_member_function_group.applicable_accessibilities = private, protected, public
#cpp_naming_symbols.stylecop_member_function_group.applicable_kinds           = method
#cpp_naming_rule.stylecop_methods_must_be_pascal_case.symbols     = stylecop_member_function_group
#cpp_naming_rule.stylecop_methods_must_be_pascal_case.style       = member_function_style
#cpp_naming_rule.stylecop_methods_must_be_pascal_case.severity    = warning


# Local variables must be camelCase
# https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1312.md
#cpp_naming_symbols.stylecop_local_fields_group.applicable_accessibilities = local
#cpp_naming_symbols.stylecop_local_fields_group.applicable_kinds           = local
#cpp_naming_rule.stylecop_local_fields_must_be_camel_case_rule.symbols     = stylecop_local_fields_group
#cpp_naming_rule.stylecop_local_fields_must_be_camel_case_rule.style       = camel_case_style
#cpp_naming_rule.stylecop_local_fields_must_be_camel_case_rule.severity    = error


##########################################
# Other Naming Rules
##########################################

# All of the following must be PascalCase:
# - Namespaces
#   https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-namespaces
#   https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1300.md
# - Classes and Enumerations
#   https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces
#   https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA1300.md
# - Delegates
#   https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces#names-of-common-types
# - Constructors, Properties, Events, Methods
#   https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-type-members
cpp_naming_symbols.element_group.applicable_kinds = class, enum, struct, method, local_function,function
cpp_naming_rule.element_rule.symbols              = element_group
cpp_naming_rule.element_rule.style                = pascal_case_style
cpp_naming_rule.element_rule.severity             = error

# Interfaces use PascalCase and are prefixed with uppercase 'I'
# https://#docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces
#cpp_naming_symbols.interface_group.applicable_kinds = interface
#cpp_naming_rule.interface_rule.symbols              = interface_group
#cpp_naming_rule.interface_rule.style                = prefix_interface_with_i_style
#cpp_naming_rule.interface_rule.severity             = warning

# Generics Type Parameters use PascalCase and are prefixed with uppercase 'T'
# https://#docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces
#cpp_naming_symbols.type_parameter_group.applicable_kinds = type_parameter
#cpp_naming_rule.type_parameter_rule.symbols              = type_parameter_group
#cpp_naming_rule.type_parameter_rule.style                = prefix_type_parameters_with_t_style
#cpp_naming_rule.type_parameter_rule.severity             = warning

# Function parameters use camelCase
## #https://#docs.microsoft.com/dotnet/standard/design-guidelines/naming-parameters
cpp_naming_symbols.parameters_group.applicable_kinds = parameter, local
cpp_naming_rule.parameters_rule.symbols              = parameters_group
cpp_naming_rule.parameters_rule.style                = camel_case_style
cpp_naming_rule.parameters_rule.severity             = warning

##########################################
# License
##########################################
# The following applies as to the .editorconfig file ONLY, and is
# included below for reference, per the requirements of the license
# corresponding to this .editorconfig file.
# See: https://github.com/RehanSaeed/EditorConfig
#
# MIT License
#
# Copyright (c) 2017-2019 Muhammad Rehan Saeed
# Copyright (c) 2019 Henry Gabryjelski
#
# Permission is hereby granted, free of charge, to any
# person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the
# Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute,
# sublicense, and/or sell copies of the Software, and to permit
# persons to whom the Software is furnished to do so, subject
# to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
##########################################

